---
layout: post
title:  "Technical Interview Questions"
date:   2017-04-18 16:40:15 +0000
---


I went into my mock technical interview expecting to be quized on something I learned on the full stack web development course such as Ruby, Rails, Angular JS, etc. Instead I was presented with a logic problem and asked how I would code a solution in Ruby. This was a surprise but I was told by the interviewer that this was normal. The problem was, given a string of parentheses (both openning and closing) of various types (round, square, curly) determine if there was a matching closing parenthesis for each opening parenthesis. An example string would be "{{[()}}}", and this would be a false string. It is an interesting puzzle and after some thought I came up with a coding solution to the problem that would work with any length string of parentheses. If this had been a real interview I think the abstract nature of the question (it is highly unlikely that this would be a problem you would meet in the workplace) may have thrown me into a bit of a panic. But the purpose for the question isn't to get a coding solution, but to demonstrate how the interviewee resolves problems, the strategies they use and the thought processes they employ. Also what kinds of questions they ask to determine the scope and nature of a problem. Finally it demonstrates how well they can work with others to find solutions to problems. I think if I had known that going into the interview things would have been less stressful.

After the interview I went searching for more problems that might be presented in a technical interview. I don't expect any of them will be asked at a particular interview, but I just wanted practice in developing strategies that could be applied to any problem. I went to project Euler (https://projecteuler.net/) and did the first dozen or so problems from the archive. It was good practice to start with but the problems gradually became more math oriented than logic oriented and I found them less and less useful. Interview Cake (https://www.interviewcake.com) has some useful puzzles to work on, but I don't have any money so I couldn't make full use of the site. A free site that has some relevant practice problems is Geeks For Geeks (http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/#algo8). There are lots of problems to try out and they all help develop the reasoning skills and strategies needed to answer technical interview problems.

When I get my first technical interview I am hoping all this logic problem practice is going to pay off.
